class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None


class BinaryTree(object):
    def __init__(self):
        pass

    def insert_node(self, node, value):
        if node is None:
            return Node(value)
        else:
            if value < node.data:
                node.left = self.insert_node(node.left, value)
            elif value > node.data:
                node.right = self.insert_node(node.right, value)
            elif value == node.data:
                print ("Node with value {} already present in tree.".format(node.data))
            return node

    def get_smallest_node_value(self, node):
        current_node = node
        while current_node.left is not None:
            current_node = current_node.left
        return current_node.data

    def get_max_node_value(self, root):
        current_node = root
        while current_node.right is not None:
            current_node = current_node.right
        return current_node.data

    def lookup_node(self, value, root_node):
        if root_node is None:
            return -1
        current_node = root_node
        traverse_path = [current_node.data]
        while (current_node.left or current_node or current_node) is not None:
            if value < current_node.data:
                current_node = current_node.left
            elif value > current_node.data:
                current_node = current_node.right
            elif value == current_node.data:
                break
            if current_node is None:
                break
            traverse_path.append(current_node.data)
            self.lookup_node(value, current_node)
        return traverse_path, current_node

    def is_node_in_tree(self, value, root):
        traverse_path, node = self.lookup_node(value, root)
        if node is None:
            print ("Node {} is not present in given binary tree. Traverse path is {}.".format(value, traverse_path))
            return False
        else:
            print ("Node {} is present is given binary tree.".format(value))
            return True

    # root -> left -> right
    def pre_order(self, root):
        pre_order_arr = []
        if root:
            pre_order_arr.append(root.data)
            pre_order_arr.extend(self.pre_order(root.left))
            pre_order_arr.extend(self.pre_order(root.right))
        return pre_order_arr

    # left -> node -> left
    def in_order(self, root):
        in_order = []
        if root:
            in_order.extend(self.in_order(root.left))
            in_order.append(root.data)
            in_order.extend(self.in_order(root.right))
        return in_order

    # left ->right -> node
    def post_order(self, root):
        post_order_arr =[]
        if root:
            post_order_arr.extend(self.post_order(root.left))
            post_order_arr.extend(self.post_order(root.right))
            post_order_arr.append(root.data)
        return post_order_arr

    # get max depth of tree
    def max_depth(self, node):
        if node is None:
            return 0
        else:
            l_depth = self.max_depth(node.left)
            r_depth = self.max_depth(node.right)
            if r_depth > l_depth:
                return r_depth+1
            else:
                return l_depth+1


    def is_leaf(self, node):
        if node.left is None and node.right is None:
            return True
        else:
            return False
    # Given a sorted (increasing order) array, write an algorithm to create a binary tree with minimal height.
    def create_binary_tree(self):
        pass
b = BinaryTree()
root = None
root = b.insert_node(root, value=4)
b.insert_node(root, 2)
b.insert_node(root, 6)
b.insert_node(root, 1)
b.insert_node(root, 3)
b.insert_node(root, 5)
b.insert_node(root, 7)
b.is_node_in_tree(12, root)
for i in range(1, 8):
    traverse_path, node = b.lookup_node(i, root)
    print "Traversing path of {}: {}".format(i, traverse_path)
print "Pre order traversal:{}.".format(b.pre_order(root))
print "Post order traversal:{}.".format(b.post_order(root))
print "In order traversal:{}.".format(b.in_order(root))

print b.max_depth(root)

#print b.get_smallest_node(root)
#a_node, traverse_path = b.lookup_node(4, root)
