class Node:
    def __init__(self, data):
        self._data = data
        self._next_node = None

    @property
    def data(self):
        return self._data


class LinkedList(object):
    def __init__(self):
        self.head = None

    def add_nodes(self, data):
        new_node = Node(data)
        new_node.next_node = self.head
        self.head = new_node

    def print_ll(self):
        current_node = self.head
        op_str = ""
        while current_node.next_node is not None:
            op_str = op_str + str(current_node.data) + "->"
            current_node = current_node.next_node
        op_str += str(current_node.data)
        print op_str
        return op_str

    def get_nth(self, n):
        current_node = self.head
        for j in range(n - 1):
            current_node = current_node.next_node
        return current_node.data

    def get_nth_from_last(self, n):
        current_node = self.head
        p2_node = self.head
        for k in range(n+1):
            p2_node = p2_node.next_node
            k += 1
        print p2_node.data
        while p2_node.next_node is not None:
            current_node = current_node.next_node
            p2_node = p2_node.next_node
        return current_node.data

    def ll_palindrome(self):
        current_node = self.head
        str_op = ''
        while current_node.next_node is not None:
            str_op = str_op + current_node.data
            current_node = current_node.next_node
        str_op = str_op + current_node.data
        print str_op
        return str_op == str_op[::-1]

    def delete_node_from_ll(self, value):
        current_node = self.head
        while current_node.next_node is not None:
            if current_node.data == value:
                current_node.data = current_node.next_node.data
                current_node.next_node = current_node.next_node.next_node
                break
            else:
                current_node = current_node.next_node
        if current_node.data != value and current_node.next_node == None:
            print "{} element is not present in linkedlist".format(value, self.print_ll())
        return self.print_ll()


ll = LinkedList()
for i in range(1, 7):
    ll.add_nodes(i)
ll.add_nodes(7)
ll.print_ll()
print "Third element from head {}.".format(ll.get_nth(3))
print "Fifth element from head {}.".format(ll.get_nth(5))
print "Third element from tail {}.".format(ll.get_nth_from_last(3))

ll = LinkedList()
ll.add_nodes('a')
ll.add_nodes('dcb')
ll.add_nodes('d')
ll.add_nodes("bc")
ll.add_nodes("a")
ll.print_ll()
print "{} is palindrome: {}".format(ll.print_ll(), ll.ll_palindrome())
print "After deleting {} from {}. \nOutput is:{}".format("bc", ll.print_ll(), ll.delete_node_from_ll("bc"))
print ll.delete_node_from_ll("xvf")